#+TITLE: Literate Emacs Configuration
#+AUTHOR: Christopher Maier
#+EMAIL: christopher.maier@gmail.com
#+OPTIONS: toc:3 num:nil ^:nil

# table of contents down to level 2
# no section numbers
# don't use TeX syntax for sub and superscripts.
# See http://orgmode.org/manual/Export-options.html

* Preliminaries
  #+begin_src emacs-lisp
    (defun in-emacs-dir (path)
      (concat user-emacs-directory path))
  #+end_src

* el-get
  :PROPERTIES:
  :tangle:   yes
  :END:
  Taken from the instructions in the [[https://github.com/dimitri/el-get/blob/master/README.md][el-get README file]]:
  #+begin_src emacs-lisp
    (add-to-list 'load-path (in-emacs-dir "el-get/el-get"))

    (unless (require 'el-get nil t)
      (url-retrieve
       "https://raw.github.com/dimitri/el-get/master/el-get-install.el"
       (lambda (s)
         (goto-char (point-max))
         (eval-print-last-sexp))))

    (setq my-recipe-directory
          (in-emacs-dir "recipes"))
    (add-to-list 'el-get-recipe-path my-recipe-directory)

    (setq el-get-user-package-directory
          (in-emacs-dir "init"))

    (setq my-packages '(auto-complete
                        autopair
                        clojure-mode
                        nrepl
                        color-theme-solarized
                        elein
                        feature-mode
                        flymake-ruby
                        magit
                        magithub
                        markdown-mode
                        ruby-block
                        ruby-mode
                        ruby-tools
                        smex
                        yasnippet
                        yaml-mode
                        slime
                        smooth-scrolling ;; from el-get
                        gnuplot-mode
                        gist
                        ))

    (el-get 'sync my-packages)

  #+end_src
* Path
  :PROPERTIES:
  :tangle:   yes
  :END:

  Apparently we need to use =--login= (instead of =-i=) to also
  capture any =PATH= entries that OS X brings in via it's
  =/usr/libexec/path_helper= utility, which is only invoked for login
  shells.  This will incorporate any settings from =~/.bash_profile=
  as well, so I just source =~/.bashrc= from there to get everything
  at once.

  This is needed for (among other things), making sure
  =ispell=/=aspell= is available for Flyspell to work properly.

  (I swiped this code from [[https://github.com/purcell/emacs.d/blob/master/init-exec-path.el][Steve Purcell's emacs.d]])

  #+begin_src emacs-lisp
    (defun set-exec-path-from-shell-PATH ()
      (let ((path-from-shell (shell-command-to-string "$SHELL --login -c 'echo $PATH'")))
        (setenv "PATH" path-from-shell)
        (setq exec-path (split-string path-from-shell path-separator))))

    (if window-system
        (set-exec-path-from-shell-PATH))
  #+end_src
* Default Configurations
  :PROPERTIES:
  :tangle:   no
  :END:
** Miscellaneous Configurations
   :PROPERTIES:
   :tangle:   yes
   :END:
   #+begin_src emacs-lisp
     (setq initial-major-mode 'org-mode)
     (set-face-attribute 'default nil :family "Anonymous Pro" :height 150)
     (setq inhibit-startup-screen t ;; There's no good reason to keep the startup screen.
           next-line-add-newlines t
           delete-by-moving-to-trash t ;; use system trash directory
           trash-directory "~/.Trash"
           line-number-mode t
           column-number-mode t
           size-indication-mode t
           require-final-newline t ;; All files end with newlines
           ;; Send backups and autosaves to the temp folder instead of polluting the current directory.
           backup-directory-alist `((".*" . ,temporary-file-directory))
           auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
           echo-keystrokes 0.1
           font-lock-maximum-decoration t
           visible-bell t)

     (add-hook 'after-save-hook
               'executable-make-buffer-file-executable-if-script-p)

     (global-linum-mode 1)

     (fset 'yes-or-no-p 'y-or-n-p)

     (global-auto-revert-mode t)

     ;; From http://eden.rutgers.edu/~mangesh/emacs.html
     (setq-default frame-title-format
                   (list '((buffer-file-name " %f" (dired-directory
                                                    dired-directory
                                                    (revert-buffer-function " %b"
                                                                            ("%b - Dir:  " default-directory)))))))

     (setq locale-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)

     (if (fboundp 'scroll-bar-mode)
         (scroll-bar-mode -1))
     (if (fboundp 'tool-bar-mode)
         (tool-bar-mode -1))
     (if (fboundp 'menu-bar-mode)
         (menu-bar-mode -1))

     (define-key global-map (kbd "C-+") 'text-scale-increase)
     (define-key global-map (kbd "C--") 'text-scale-decrease)
#+end_src
** Server
   :PROPERTIES:
   :tangle:   yes
   :END:
   #+begin_src emacs-lisp
     (server-start)
   #+end_src
#+end_src
** Ido Mode
   :PROPERTIES:
   :tangle:   yes
   :END:
   #+begin_src emacs-lisp
     (require 'ido)
     (ido-mode t)
     (setq ido-enable-flex-matching t)
   #+end_src
*** Jump-to-symbol
    #+begin_src emacs-lisp
      ;; I got this from Seth Falcon
      (require 'imenu)

      (defun prelude-ido-goto-symbol (&optional symbol-list)
        "Refresh imenu and jump to a place in the buffer using Ido."
        (interactive)
        (unless (featurep 'imenu)
          (require 'imenu nil t))
        (cond
         ((not symbol-list)
          (let ((ido-mode ido-mode)
                (ido-enable-flex-matching
                 (if (boundp 'ido-enable-flex-matching)
                     ido-enable-flex-matching t))
                name-and-pos symbol-names position)
            (unless ido-mode
              (ido-mode 1)
              (setq ido-enable-flex-matching t))
            (while (progn
                     (imenu--cleanup)
                     (setq imenu--index-alist nil)
                     (prelude-ido-goto-symbol (imenu--make-index-alist))
                     (setq selected-symbol
                           (ido-completing-read "Symbol? " symbol-names))
                     (string= (car imenu--rescan-item) selected-symbol)))
            (unless (and (boundp 'mark-active) mark-active)
              (push-mark nil t nil))
            (setq position (cdr (assoc selected-symbol name-and-pos)))
            (cond
             ((overlayp position)
              (goto-char (overlay-start position)))
             (t
              (goto-char position)))))
         ((listp symbol-list)
          (dolist (symbol symbol-list)
            (let (name position)
              (cond
               ((and (listp symbol) (imenu--subalist-p symbol))
                (prelude-ido-goto-symbol symbol))
               ((listp symbol)
                (setq name (car symbol))
                (setq position (cdr symbol)))
               ((stringp symbol)
                (setq name symbol)
                (setq position
                      (get-text-property 1 'org-imenu-marker symbol))))
              (unless (or (null position) (null name)
                          (string= (car imenu--rescan-item) name))
                (add-to-list 'symbol-names name)
                (add-to-list 'name-and-pos (cons name position))))))))

      ;; Jump to a definition in the current file. (This is awesome.)
      (global-set-key (kbd "M-i") 'prelude-ido-goto-symbol)
    #+end_src
** SavePlace
   :PROPERTIES:
   :tangle:   yes
   :END:
   #+begin_src emacs-lisp
     (require 'saveplace)
     (setq save-place-file (in-emacs-dir "saveplace"))
     (setq-default save-place t)
   #+end_src
** EShell: The Emacs Shell
   #+begin_src emacs-lisp
     (global-set-key "\C-xt" 'eshell)
   #+end_src
** Rainbow Parentheses
   Rainbow parentheses are nice to have, and not just when coding
   Lisp.  I use =highlight-parentheses-mode= for this.

   Apparently highlight-parentheses-mode doesn't provide a way to
   programmatically activate it (you need to do it manually with =M-x
   highlight-parentheses-mode=) This is a pain, so we'll provide such
   a way, and go ahead and activate it globally.

   Stolen from [[http://nflath.com/2010/02/emacs-minor-modes-mic-paren-pager-dired-isearch-whichfunc-winpoint-and-highlight-parentheses/][here]].

   #+begin_src emacs-lisp
     (defun turn-on-highlight-parentheses-mode ()
       (highlight-parentheses-mode t))
     (define-global-minor-mode global-highlight-parentheses-mode
       highlight-parentheses-mode
       turn-on-highlight-parentheses-mode)

     (global-highlight-parentheses-mode)
   #+end_src

   Since the default colors for highlight-parentheses-mode are kind of
   terrible, and I'd prefer "rainbow parens", we'll override the
   colors.  Stolen from [[http://stackoverflow.com/questions/2413047/how-do-i-get-rainbow-parentheses-in-emacs/2413472#2413472][this StackOverflow post]].

   #+begin_src emacs-lisp
     (setq hl-paren-colors
           '("orange1" "yellow1" "greenyellow" "green1"
             "springgreen1" "cyan1" "slateblue1" "magenta1" "purple"))
   #+end_src
** Tabs
   :PROPERTIES:
   :tangle:   yes
   :END:
   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq tab-width 4)
   #+end_src
** Whitespace
   :PROPERTIES:
   :tangle:   yes
   :END:
   #+begin_src emacs-lisp
     (global-set-key [f5] 'whitespace-mode)
     (add-hook 'before-save-hook 'whitespace-cleanup)
     (add-hook 'makefile-mode-hook
               (lambda ()
                 (whitespace-mode t)))
     ;; http://xahlee.org/emacs/whitespace-mode.html
     (setq whitespace-display-mappings
           '((space-mark 32 [183] [46]) ; normal space, Â·
             (space-mark 160 [164] [95])
             (space-mark 2208 [2212] [95])
             (space-mark 2336 [2340] [95])
             (space-mark 3616 [3620] [95])
             (space-mark 3872 [3876] [95])
             (newline-mark 10 [182 10]) ; newlne, Â¶
             (tab-mark 9 [9655 9] [92 9]) ; tab, â·
             ))
   #+end_src
** Sizing
   #+begin_src emacs-lisp
      (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
      (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
      (global-set-key (kbd "S-C-<down>") 'shrink-window)
      (global-set-key (kbd "S-C-<up>") 'enlarge-window)
   #+end_src
* Gist
  :PROPERTIES:
  :tangle:   yes
  :END:

  Documentation available at https://github.com/defunkt/gist.el.

  View a gist once it has been created.
  #+begin_src emacs-lisp
    (setq gist-view-gist t)
  #+end_src

* Languages
  :PROPERTIES:
  :tangle:   no
  :END:
** Erlang
   :PROPERTIES:
   :tangle: no
   :END:
   On OS X, I install Erlang from source; a vanilla install goes here by default:
   #+begin_src emacs-lisp
     (setq erlang-root-dir "/usr/local/lib/erlang")
   #+end_src

   The current version is:
   #+begin_src emacs-lisp
     (setq erlang-version "2.6.8")
   #+end_src

   The rest of this configuration is taken from [[http://www.erlang.org/doc/apps/tools/erlang_mode_chapter.html][the Erlang documentation]].
   #+begin_src emacs-lisp
     (add-to-list 'load-path (concat erlang-root-dir "/lib/tools-" erlang-version "/emacs"))
     (add-to-list 'exec-path (concat erlang-root-dir "/bin"))

     (add-to-list 'auto-mode-alist '("\\.erl?$" . erlang-mode))
     (add-to-list 'auto-mode-alist '("\\.hrl?$" . erlang-mode))

     (require 'erlang-start)
     (require 'erlang-flymake)
   #+end_src
** Javascript
   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
     (add-to-list 'auto-mode-alist '("\\.json$" . js2-mode))

     (autoload 'js2-mode "js2-mode" "Start JS2 Mode" t)

     (defun js2-custom-setup ()
       (autopair-mode -1))

     (add-hook 'js2-mode-hook 'js2-custom-setup)
   #+end_src
** Lisps
*** SLIME
    #+begin_src emacs-lisp
      (global-set-key "\C-cs" 'slime-selector)
    #+end_src
**** AutoComplete in SLIME
     Steve Purcell made [[https://github.com/purcell/ac-slime][this snazzy add-on]] for AutoComplete to use SLIME symbols.

     #+begin_src emacs-lisp
       (load-vendor-package "ac-slime")

       (require 'ac-slime)
       (add-hook 'slime-mode-hook 'set-up-slime-ac)
       (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
     #+end_src
*** Emacs Lisp
    It's nice to have Paredit in Emacs Lisp, no?

    #+begin_src emacs-lisp
      (add-hook 'emacs-lisp-mode-hook
                'enable-paredit-mode)
    #+end_src
*** Clojure
**** All The Modes
     #+begin_src emacs-lisp
       (require 'clojure-test-mode)
       (require 'clojurescript-mode)
     #+end_src
**** Durendal
     #+begin_src emacs-lisp
       (require 'durendal)
       (add-hook 'clojure-mode-hook 'durendal-enable-auto-compile)
       (add-hook 'slime-repl-mode-hook 'durendal-slime-repl-paredit)
       (add-hook 'sldb-mode-hook 'durendal-dim-sldb-font-lock)
       ;;  (add-hook 'slime-compilation-finished-hook 'durendal-hide-successful-compile)
     #+end_src
**** SLIME
     Make it pretty.

     #+begin_src emacs-lisp
       (add-hook 'slime-repl-mode-hook
                 'clojure-mode-font-lock-setup)
     #+end_src
**** Miscellaneous
     [[https://github.com/gstamp/align-cljlet][align-cljlet]] is a neat little package that allows you to neatly
     align entries in Clojure bindings and literal hashes.

     #+begin_src emacs-lisp
       (load-vendor-package "align-cljlet")
       (require 'align-cljlet)

       (define-key clojure-mode-map (kbd "C-c C-c a") 'align-cljlet)
     #+end_src
*** Scheme
    Instructions for running [[http://www.scheme.com/petitechezscheme.html][Petite Chez Scheme]] through Emacs from
    [[http://www.cs.indiana.edu/chezscheme/emacs/][Indiana University]] (and they should know!).

    (I'm using Petite Chez Scheme, because that's what Dan Friedman
    and William Byrd used at Clojure Conj, 2011; if it's good enough
    for them, it's good enough for me.)

    #+begin_src emacs-lisp
      (autoload 'scheme-mode "cmuscheme"
        "Major mode for Scheme." t)
      (autoload 'run-scheme "cmuscheme"
        "Switch to interactive Scheme buffer." t)
      (add-to-list 'auto-mode-alist
                   '("\\.ss" . scheme-mode)
                   '("\\.scm" . scheme-mode))
    #+end_src

    Make Emacs invoke Petite Chez Scheme when running =M-x run-scheme=
    (assumes =petite= is on your path):
    #+begin_src emacs-lisp
      (custom-set-variables '(scheme-program-name "petite"))
    #+end_src

    Add some special indentation rules for Kanren / miniKanren
    function calls.
    #+begin_src emacs-lisp
      (put 'fresh 'scheme-indent-function 1)
      (put 'run 'scheme-indent-function 2)
    #+end_src

    Can't forget Paredit!
    #+begin_src emacs-lisp
      (add-hook 'scheme-mode-hook
                'enable-paredit-mode)
    #+end_src
* Org Mode
  :PROPERTIES:
  :tangle:   yes
  :END:
  #+begin_src emacs-lisp
    (require 'org-mobile)

    (defun org-file (filename-without-extension)
      (concat org-directory "/" filename-without-extension ".org"))

    ;; Stole this next bit from the INFO pages
    (defun org-summary-todo (n-done n-not-done)
      "Switch entry to DONE when all subentries are done, to TODO otherwise."
      (let (org-log-done org-log-states)   ; turn off logging
        (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

    (add-to-list 'org-modules 'org-habit)

    (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
    (add-hook 'org-mode-hook 'turn-on-flyspell 'append)
    (add-hook 'org-mode-hook
              (let ((original-command (lookup-key org-mode-map [tab])))
                `(lambda ()
                   (setq yas/fallback-behavior
                         '(apply ,original-command))
                   (local-set-key [tab] 'yas/expand))))
    (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cb" 'org-iswitchb)
    (global-set-key "\C-cc" 'org-capture)
    (global-set-key "\C-cl" 'org-store-link)

    (global-set-key (kbd "<f9>") 'org-mobile-push)
    (global-set-key (kbd "S-<f9>") 'org-mobile-pull)
    (global-set-key (kbd "<f11>") 'org-agenda-clock-in)
    (global-set-key (kbd "<f12>") 'org-agenda-clock-out)

    (setq org-directory "~/Dropbox/org"
          org-mobile-files `(,org-directory)
          org-mobile-directory "~/Dropbox/MobileOrg"
          org-mobile-inbox-for-pull (org-file "from-inbox")
          org-agenda-files `(,org-directory)
          org-agenda-span 'day
          org-agenda-skip-deadline-if-done t
          org-agenda-skip-scheduled-if-done t
          org-agenda-skip-scheduled-if-deadline-is-shown 'not-today
          org-agenda-include-diary nil
          org-agenda-log-mode-items '(closed clock)
          org-agenda-custom-commands '(("p" . "Priorities")
                                       ("pa" "A items" tags-todo "+PRIORITY=\"A\""
                                        ((org-agenda-todo-ignore-scheduled 'future)
                                         (org-agenda-tags-todo-honor-ignore-options t)))
                                       ("pb" "B items" tags-todo "+PRIORITY=\"B\""
                                        ((org-agenda-todo-ignore-scheduled 'future)
                                         (org-agenda-tags-todo-honor-ignore-options t)))
                                       ("pc" "C items" tags-todo "+PRIORITY=\"C\""
                                        ((org-agenda-todo-ignore-scheduled 'future)
                                         (org-agenda-tags-todo-honor-ignore-options t)))
                                       ("w" "Things I'm Waiting On" todo "WAITING")
                                       ("e" "Errands" tags-todo "errands|shopping"
                                        ((org-agenda-todo-ignore-scheduled 'future)
                                         (org-agenda-tags-todo-honor-ignore-options t)))
                                       ("r" "Refile" tags "+REFILE")
                                       ("z" "By Date"
                                        ((agenda "Dead" ((org-agenda-entry-types '(:deadline))
                                                         (org-agenda-sorting-strategy '(priority-down category-keep))))
                                         (agenda "Do" ((org-agenda-entry-types '(:scheduled))
                                                       (org-agenda-sorting-strategy '(priority-down category-keep))))))
                                       ("f" "Financial Work" agenda ""
                                        ((org-agenda-files `(,(org-file "financial")))))
                                       ("W" . "Work Projects")
                                       ("We" "Work" agenda ""
                                        ((org-agenda-files `(,(org-file "opscode")))
                                         (org-agenda-sorting-strategy '(priority-down effort-down)))))
          org-default-notes-file (org-file "inbox")
          org-capture-templates '(("s" "Shopping")
                                  ("sg" "Groceries" entry
                                   (file+headline (org-file "shopping") "Groceries")
                                   "* TODO %? %^G\n")
                                  ("ss" "General Shopping" entry
                                   (file+headline (org-file "shopping") "Other Things To Buy")
                                   "* TODO %? %^G\n")
                                  ("t" "General TODO" entry
                                   (file org-default-notes-file)
                                   "* TODO %?\n%U\n%a" :clock-in t :clock-resume t)
                                  ("w" "Work Tasks" entry
                                   (file+headline (org-file "opscode") "Daily Catch-All")
                                   "* TODO %?"))
          org-enforce-todo-dependencies t
          org-todo-keywords '((sequence "TODO(t)"
                                        "STARTED(s!)"
                                        "WAITING(w@/!)"
                                        "APPT(a)"
                                        "|"
                                        "DONE(d!)"
                                        "CANCELLED(c@)"
                                        "DEFERRED(f@)"))
          org-treat-S-cursor-todo-selection-as-state-change nil
          org-use-fast-todo-selection t
          org-use-property-inheritance t
          org-refile-use-outline-path 'file
          org-refile-allow-creating-parent-nodes 'confirm
          org-refile-targets '((org-agenda-files . (:maxlevel . 5))
                               (nil . (:maxlevel . 5)))
          org-clock-out-remove-zero-time-clocks t
          org-clock-persist t
          org-completion-use-ido t
          org-deadline-warning-days 3
          org-hide-leading-stars t
          org-log-done 'note
          org-log-into-drawer t
          org-outline-path-complete-in-steps t
          org-hierarchical-todo-statistics nil
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-src-window-setup 'current-window
          org-use-sub-superscripts '{}
          org-habit-graph-column 60)

    (org-clock-persistence-insinuate)

    (defun cwm-work-tasks-done-last-workday ()
      "Produces an org agenda tags view list of the work tasks
        completed on the last work day (i.e., yesterday, or last Friday
        if today is Monday or Sunday).  Good for daily stand-up meetings."
      (interactive)
      (let* ((day-of-week (calendar-day-of-week (calendar-current-date)))
             (start-day (calendar-current-date (cond ((= day-of-week 1) -3)     ;; if Monday, go back 3 days to Friday
                                                     ((= day-of-week 0) -2)     ;; if Sunday, go back 2 days to Friday
                                                     (t                 -1))))  ;; otherwise, use yesterday
             (end-day (calendar-current-date (cond ((= day-of-week 1) -2)       ;; if Monday, go back 2 days to Saturday
                                                   ((= day-of-week 0) -1)       ;; if Sunday, go back 1 day to Saturday
                                                   (t                  0)))))   ;; otherwise, use today
        (org-tags-view nil
                       (concat "CATEGORY=\"work\"+TODO=\"DONE\""
                               (format "+CLOSED>=\"[%d-%02d-%02d]\""
                                       (calendar-extract-year start-day)
                                       (calendar-extract-month start-day)
                                       (calendar-extract-day start-day))
                               (format "+CLOSED<=\"[%d-%02d-%02d]\""
                                       (calendar-extract-year end-day)
                                       (calendar-extract-month end-day)
                                       (calendar-extract-day end-day))))))

    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((clojure . t)
                                   (sh . t)
                                   (dot . t)))



    #+end_src
* Registers
  :PROPERTIES:
  :tangle:   yes
  :END:

  Jump to files with a simple =C-x r j <register>=.
  #+begin_src emacs-lisp
    (set-register ?i `(file . ,(in-emacs-dir "emacs-init.org")))
    (set-register ?r `(file . "~/.bashrc"))
  #+end_src

* Customizations
  :PROPERTIES:
  :tangle:   yes
  :END:

  Don't pollute =init.el= with GUI-made customizations.

  #+begin_src emacs-lisp
    (setq custom-file (in-emacs-dir "custom.el"))
    (load custom-file)
  #+end_src
